(** Control the flow of request to the remote peer. *)
open Core
open Async

type t

(** [t] receives block requests from the pipe, and sends them to [Peer_comm.t]
    in a way that keeps the number of pending requests bounded.Addr

    It is created by a [Peer.t] and consume blocks generated by a 
    [Block_producer.t]. The producer is restrained via pushbacks. *)
val create : Block.t Pipe.Reader.t -> Peer_comm.t -> t

(** start the consumer TODO why not doing it in create? *)
val start : t -> unit

(** notify the consumer that requested block has arrived so that it can proceed
    with new requests. *)
val notify : t -> Block.t -> unit

(** returns the list of *pieces* requested (several blocks can belong the same
    piece. Needed if we need to reschedule requests when a peer leaves. *)
val pending_requests : t -> int list